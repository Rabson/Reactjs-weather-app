{"version":3,"sources":["store/types.ts","services/index.ts","store/store.ts","store/action.ts","components/cityList.tsx","components/weatherDetails.tsx","components/navbar.tsx","components/home.tsx","store/reducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ForecastActionType","initialState","url","getCityList","a","async","fetch","response","json","data","getWeatherDetailsForCity","cityName","getWeatherDetailsForCitys","citys","method","headers","body","JSON","stringify","getCityDetails","detialsList","type","GET_CITY_DETAILS","updateCitys","list","UPDATE_CITYS","CityList","props","selectCity","ele","GetCitys","arr","citysList","filter","e","index","map","indexOf","active","setState","selected","state","this","className","key","onClick","React","Component","connect","forecast","dispatch","city","SET_CITYS","setCitys","WeatherDetails","location","region","country","current_observation","wind","speed","forecasts","date","day","low","high","text","atmosphere","humidity","visibility","pressure","NavBar","submitHandler","preventDefault","getWeaterDetials","href","target","rel","alt","src","width","height","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onSubmit","role","value","onChange","placeholder","required","disabled","length","selectedCitys","services","console","log","Home","getDetails","alert","GetWeaterDetials","cityList","weatherDetails","action","newArr","CLEAR_CITYS","UNSELECT_CITY","reducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","logger","thunk","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f52a9b17.chunk.js","sourcesContent":["import { Action } from \"redux\";\r\n\r\nexport interface ForecastState {\r\n    citysList : any[];\r\n    selectedCitys : any[];\r\n    weatherDetails: any[];\r\n}\r\n\r\nexport enum ForecastActionType {\r\n    UPDATE_CITYS = \"UPDATE_CITYS\",\r\n    GET_CITY_DETAILS = \"GET_CITY_DETAILS\",\r\n    GET_CITYS = \"GET_CITYS\",\r\n    SET_CITYS = \"SET_CITYS\",\r\n    CLEAR_CITYS = \"CLEAR_CITYS\",\r\n    UNSELECT_CITY =\"UNSELECT_CITY\",\r\n}\r\n\r\n// weather\r\nexport interface UpdateCitys extends Action {\r\n    type: ForecastActionType.UPDATE_CITYS;\r\n    data:[]\r\n}\r\n\r\nexport interface GetCityDetails extends Action {\r\n    type: ForecastActionType.GET_CITY_DETAILS;\r\n    data:[]\r\n}\r\n\r\nexport interface GetCitys extends Action {\r\n    type: ForecastActionType.GET_CITYS;\r\n}\r\n\r\nexport interface SetCitys extends Action {\r\n    type: ForecastActionType.SET_CITYS;\r\n    data: {}\r\n}\r\nexport interface ClearCitys extends Action {\r\n    type: ForecastActionType.CLEAR_CITYS;\r\n}\r\nexport interface UnselectCitys extends Action {\r\n    type: ForecastActionType.UNSELECT_CITY;\r\n}\r\n\r\n","interface City {\r\n    cityName :string\r\n}\r\n\r\nconst url = \"http://13.234.94.133:8080\";\r\n// const url = \"http://localhost:8080\";\r\n\r\nexport const getCityList = async () => {\r\n    try {\r\n        let response = await fetch(`${url}/city`);\r\n        let data = await response.json()\r\n        return data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const getWeatherDetailsForCity = async (cityName:string) => {\r\n    try {\r\n        debugger\r\n        let response = await fetch(`${url}/weater/${cityName}`);\r\n        let data = await response.json()\r\n        return data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const getWeatherDetailsForCitys = async (citys: City) => {\r\n    try {\r\n        let response = await fetch(`${url}/weater/`, {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body:JSON.stringify({ citys })\r\n        });\r\n        let data = await response.json()\r\n        return data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\n\r\nimport forecast from \"./reducer\";\r\nimport { ForecastState } from \"./types\";\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reducer = combineReducers({\r\n    forecast\r\n});\r\n\r\nexport interface State {\r\n    forecast: ForecastState;\r\n}\r\n\r\nconst composeEnhancers =\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst configureStore = (initialState?: State) =>\r\n    createStore(\r\n        reducer,\r\n        initialState,\r\n        composeEnhancers(applyMiddleware(logger, thunk))\r\n    );\r\n\r\nconst store = configureStore();\r\n\r\nexport default store;\r\n","import { ThunkAction, ThunkDispatch } from 'redux-thunk'\r\nimport { AnyAction } from 'redux'\r\n\r\nimport { \r\n    ForecastActionType, \r\n    GetCityDetails,\r\n    UpdateCitys,\r\n    SetCitys,\r\n    ClearCitys,\r\n    UnselectCitys,\r\n    // GetCitys,\r\n} from \"./types\";\r\n\r\nimport * as services from '../services/index';\r\n\r\nexport const getCityDetails = (detialsList: []): GetCityDetails => ({\r\n    type: ForecastActionType.GET_CITY_DETAILS,\r\n    data :detialsList\r\n});\r\n\r\nexport const updateCitys = (list :[]): UpdateCitys => ({\r\n    type: ForecastActionType.UPDATE_CITYS,\r\n    data : list\r\n});\r\n\r\nexport const setCitys = (city :object): SetCitys => {\r\n    return {\r\n        type: ForecastActionType.SET_CITYS,\r\n            data : city\r\n    }\r\n};\r\nexport const clearCitys = (): ClearCitys => ({\r\n    type: ForecastActionType.CLEAR_CITYS\r\n});\r\nexport const unselectCitys = (): UnselectCitys => ({\r\n    type: ForecastActionType.UNSELECT_CITY\r\n});\r\n\r\nexport const getCitys = (): ThunkAction<Promise<void>, {}, {}, AnyAction> => {\r\n    return async (dispatch: ThunkDispatch<{}, {}, AnyAction>): Promise<void> => {\r\n        try {\r\n            const list = await services.getCityList();\r\n            dispatch(updateCitys(list))\r\n        } catch (error) {\r\n            console.log(error)\r\n            dispatch(updateCitys([]))\r\n        }\r\n    }\r\n};\r\nexport const getWeaterDetials = (selectedCitys:any): ThunkAction<Promise<void>, {}, {}, AnyAction> => {\r\n    return async (dispatch: ThunkDispatch<{}, {}, AnyAction>): Promise<void> => {\r\n        try {\r\n            const list = await services.getWeatherDetailsForCitys(selectedCitys);\r\n            dispatch(getCityDetails(list))\r\n        } catch (error) {\r\n            console.log(error)\r\n            dispatch(getCityDetails([]))\r\n        }\r\n    }\r\n};\r\nexport const getWeaterDetialsforCity = (selectedCitys:any): ThunkAction<Promise<void>, {}, {}, AnyAction> => {\r\n    return async (dispatch: ThunkDispatch<{}, {}, AnyAction>): Promise<void> => {\r\n        try {\r\n            debugger\r\n            const list = await services.getWeatherDetailsForCity(selectedCitys);\r\n            console.log(list)\r\n            dispatch(getCityDetails(list))\r\n        } catch (error) {\r\n            console.log(error)\r\n            dispatch(getCityDetails([]))\r\n        }\r\n    }\r\n};\r\n","import React, { } from 'react';\r\n// useState\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nimport { ForecastState } from '../store/types'\r\nimport { setCitys } from \"../store/action\";\r\n\r\ninterface AppProps {\r\n    citysList: any,\r\n    // GetCitys : () => void\r\n}\r\n\r\ninterface AppState {\r\n    selected :{}\r\n}\r\n\r\nclass CityList extends React.Component<any, AppState> {\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            selected :{}\r\n        }\r\n    }\r\n\r\n    selectCity = (ele: any) => {        \r\n        this.props.GetCitys(ele);\r\n        const arr = this.props.citysList.filter((e: any) => e.cityName === ele.cityName);\r\n        const index = this.props.citysList.map((ele: any) => ele.cityName).indexOf(arr[0].cityName);\r\n        this.props.citysList[index].active = this.props.citysList[index].active?false:true;\r\n        this.setState({selected : ele})\r\n    }\r\n\r\n\r\n    render() {\r\n        const { citysList } = this.props;\r\n        return (\r\n\r\n            <ul className=\"list-group\">\r\n                {\r\n                    citysList ? citysList.map((ele: any) => {\r\n                        return (<li key={JSON.stringify(ele)}\r\n                            onClick={() => this.selectCity(ele)}\r\n                            className={\"list-group-item\" + (ele.active ? \" list-group-item-dark\" : \" \")}>\r\n                            {ele.cityName}\r\n                        </li>)\r\n                    }) : ''\r\n                }\r\n                {/* // <City list={...citysList} /> */}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: ForecastState) => {\r\n\r\n    const { citysList } = (state as any).forecast;\r\n    return {\r\n        citysList: citysList\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    GetCitys: (city: object) => dispatch(setCitys(city))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CityList);\r\n\r\n\r\n\r\n\r\n\r\n// interface CityProps {\r\n//     list: any\r\n// }\r\n// const City: React.FC = (props: any) => {\r\n//     const [activeCity, setCity] = useState(null);\r\n\r\n//     return (\r\n//         <>\r\n//             <ul className=\"list-group\">\r\n//                 {\r\n//                     props ? props.map((ele: any) => {\r\n//                         return (\r\n//                             <li onClick={() => { setCity(ele.cityName) }}\r\n//                                 style={{ color: activeCity === ele.cityName ? \"red\" : \"green\" }}\r\n//                                 key={ele.cityName}\r\n//                                 className=\"list-group-item\">{ele.cityName}\r\n//                             </li>)\r\n//                     }) : ''\r\n//                 }\r\n//             </ul>\r\n//             {/* {props.map(city => <p key={city} onClick={() => { setCity(city) }} style={{ color: activeCity === city ? \"red\" : \"green\" }}>{city}</p>)} */}\r\n//         </>\r\n//     );\r\n// };\r\n","import React from 'react';\r\n\r\nconst WeatherDetails: React.FC = (props: any) => {\r\n\r\n    if (!props.location.city) {\r\n      return  (<div className=\"card\">\r\n            No Data\r\n        </div>)\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n        <div className=\"card-header\">\r\n            <h4 className=\"card-title\">{props.location.city} <span>,{props.location.region}</span></h4>\r\n            <p className=\"card-text\">{props.location.country}</p>\r\n                <span className=\"card-link\"> Wind speed: {props.current_observation.wind.speed}</span>\r\n        </div>\r\n            \r\n        <div className=\"card-body\">\r\n            <h5>Forcast</h5>\r\n            <br/>\r\n            <div className=\"card-columns\">\r\n                {\r\n                    props.forecasts.map((ele :any) => {                        \r\n                        return (\r\n                            <div key={ele.date} className=\"card bg-light\">\r\n                                <div className=\"card-body text-center\">\r\n                                    <h5 className=\"card-text\">{ele.day}</h5>\r\n                                    <p className=\"card-text\">Low: {ele.low}</p>\r\n                                    <p className=\"card-text\">High: {ele.high}</p>\r\n                                    <p className=\"card-text\">Climate: {ele.text}</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                    \r\n                }\r\n            </div>\r\n        </div>\r\n            <div className=\"card-footer\">\r\n                <p className=\"card-text\">Humidity : {props.current_observation.atmosphere.humidity}</p>\r\n                <p className=\"card-text\">Visibility : {props.current_observation.atmosphere.visibility}</p>\r\n                <p className=\"card-text\">Pressure: {props.current_observation.atmosphere.pressure}</p>\r\n            </div>\r\n\r\n    </div>\r\n    );\r\n}\r\nexport default WeatherDetails;\r\n","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { getWeaterDetialsforCity } from \"../store/action\";\r\nimport { ThunkDispatch } from 'redux-thunk';\r\n\r\ninterface AppProps {\r\n    getWeaterDetials: () => void;\r\n    //code related to your props goes here\r\n}\r\n\r\ninterface AppState {\r\n    location: string\r\n}\r\n\r\nclass NavBar extends React.Component<any, AppState> {\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            location: ''\r\n        }\r\n    }\r\n\r\n    submitHandler = (e: any) => {\r\n        e.preventDefault();\r\n        this.props.getWeaterDetials(this.state.location)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-secondary static-top\">\r\n                    <div className=\"container\">\r\n                        <a href=\"https://www.yahoo.com/?ilc=401\" target=\"_blank\" rel=\"noopener noreferrer\" >\r\n                            <img className=\"brand\" alt=\"Yahoo\" src=\"https://poweredby.yahoo.com/purple.png\"\r\n                                width=\"134\" height=\"29\" />\r\n                        </a>\r\n                        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                            <span className=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n                            <ul className=\"navbar-nav ml-auto\">\r\n                                <li className=\"nav-item active\">\r\n                                    <form className=\"nav-link navbar-form navbar-right\" onSubmit={this.submitHandler} role=\"search\">\r\n                                        <div className=\"form-group\">\r\n                                            <input id=\"city\" type=\"text\" value={this.state.location} onChange={(e: any) => { this.setState({ location: e.target.value }) }} className=\"form-control\" placeholder=\"Enter City\" required />\r\n                                        </div>\r\n                                        <button type=\"submit\" disabled={this.state.location.length < 2} className=\"btn btn-light\">Get Forecast</button>\r\n                                    </form>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\r\n    getWeaterDetials: (city: object) => dispatch(getWeaterDetialsforCity(city))\r\n});\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(NavBar);\r\n\r\n\r\n","import { ThunkDispatch } from 'redux-thunk';\r\nimport React, { Fragment } from 'react';\r\nimport { connect } from \"react-redux\";\r\n// import { Dispatch } from \"redux\";\r\n\r\nimport CityList from './cityList';\r\nimport WeatherDetails from './weatherDetails'\r\nimport NavBar from './navbar';\r\n\r\nimport { ForecastState } from '../store/types'\r\nimport { getCitys, getWeaterDetials } from \"../store/action\";\r\n\r\ninterface AppProps {\r\n    GetCitys: () => void;\r\n    GetWeaterDetials: () => void;\r\n    selectedCitys: any[]\r\n}\r\n\r\ninterface AppState {\r\n    location: any,\r\n    data: any,\r\n    cityList: any[]\r\n}\r\n\r\nclass Home extends React.Component<any, AppState> {\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            location: '',\r\n            data: '',\r\n            cityList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.GetCitys();\r\n    }\r\n\r\n    getDetails = () => {\r\n        if (!this.props.selectedCitys.length) {\r\n            return alert(\"Please select city\");\r\n        }\r\n\r\n        this.props.GetWeaterDetials(this.props.selectedCitys)\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <NavBar />\r\n                <main>\r\n                    <div className=\"App\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-4\">\r\n                                    <h4>City list :</h4>\r\n                                    <CityList /><br />\r\n                                    <button onClick={this.getDetails}\r\n                                        className=\"btn btn-secondary secondary text-right\">\r\n                                        Get Forecast </button>\r\n                                </div>\r\n                                <div className=\"col-sm-8\">\r\n                                    <div className=\"container\">\r\n                                        <h3>Weather Details :</h3>\r\n                                        {   \r\n                                            this.props.weatherDetails.map((ele: any) => {\r\n                                                return (\r\n                                                    <Fragment key={ele.location.city}>\r\n                                                            <WeatherDetails {...ele} />\r\n                                                        <br />\r\n                                                    </Fragment>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: ForecastState) => {\r\n\r\n    const { citysList, selectedCitys, weatherDetails } = (state as any).forecast;\r\n    return {\r\n        cityList: citysList,\r\n        selectedCitys: selectedCitys,\r\n        weatherDetails: weatherDetails\r\n    }\r\n\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\r\n    GetCitys: () => dispatch(getCitys()),\r\n    GetWeaterDetials: (selectedCitys: any[]) => dispatch(getWeaterDetials(selectedCitys))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Home);","import { ForecastActionType, ForecastState } from \"./types\";\r\nimport { Action } from \"redux\";\r\n\r\nconst initialState: ForecastState = {\r\n    citysList: [],\r\n    selectedCitys :[],\r\n    weatherDetails :[]\r\n};\r\n\r\nconst forecast = (state: ForecastState = initialState, action: Action): ForecastState => {\r\n    switch (action.type) {\r\n\r\n        case ForecastActionType.UPDATE_CITYS:\r\n            return { ...state, citysList: [...(action as any).data] };\r\n     \r\n        case ForecastActionType.SET_CITYS: {\r\n            const data = (action as any).data;\r\n            let newArr:any[] = []\r\n            // const arr: any = new Set([...state.selectedCitys, (action as any).data]);\r\n            const arr = state.selectedCitys.filter((e: any) => e.cityName === data.cityName)\r\n            if (arr.length) { \r\n                newArr = [...state.selectedCitys.filter((e: any) => e.cityName !== data.cityName)]\r\n            } else {\r\n                newArr = [...state.selectedCitys,data]\r\n            }\r\n            return { ...state, selectedCitys: newArr  };\r\n        }\r\n            \r\n        case ForecastActionType.CLEAR_CITYS:\r\n            return { ...state, citysList: [] };\r\n        \r\n        case ForecastActionType.UNSELECT_CITY:  {\r\n            const data = (action as any).data;\r\n            const arr = state.selectedCitys.filter((e: any) => e.cityName !== data.cityName)\r\n            return { ...state, selectedCitys: [...arr] };\r\n        }\r\n\r\n        case ForecastActionType.GET_CITY_DETAILS:\r\n            return { ...state, weatherDetails: [...(action as any).data] };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default forecast;\r\n","import React from 'react';\nimport { Provider } from \"react-redux\";\nimport Home from './components/home';\nimport './App.css';\nimport store from \"./store/store\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Home />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}